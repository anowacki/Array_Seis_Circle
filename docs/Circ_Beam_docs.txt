Help on module circ_beam:

NAME
    circ_beam - #/usr/bin/env python

FUNCTIONS
    ARF_process_f_s_spherical(geometry, sxmin, sxmax, symin, symax, sstep, distance, fmin, fmax, fstep, scale)
        Returns array transfer function as a function of slowness difference.
        This will only work for SAC files.
        
        Param: geometry (2D numpy array)
        Description: numpy array of [lon, lat,elevation] values for each station.
        
        Param: s[x/y](min/max) (float).
        Description: the min/max value of the slowness of the wavefront in x/y direction.
        
        Param: sstep (float)
        Description: slowness interval in x andy direction.
        
        Param: distance (float)
        Description: the distance of the event from the centre of the stations,
        this will be used to estimate the curvature of the wavefront.
        
        Param: fmin (float)
        Description: minimum frequency in signal.
        
        Param: fmax (float)
        Description maximum frequency in signal.
        
        Param: fstep (float)
        Description: frequency sample distance.
        
        Param: scale: (Bool)
        Description: if True, the values will be normalised between 0 and 1.
        
        Return:
            transff: 2D numpy array of power values in a slowness grid for the array response function.
            ARF_arr: 2D numpy array of [slow_x,slow_y,power] can be written to an xyz file for GMT.
    
    BF_Noise_Threshold_Relative_XY(traces, sampling_rate, geometry, distance, sxmin, sxmax, symin, symax, s_space)
        Function to calculate the TP plot or power grid given traces and a
        range of slowness vectors described in a Cartesian system (X/Y).
        Once the power grid has been calculated, a noise estimate is found by scambling
        the traces 1000 times and, in each scamble, stack them then calculate a power
        value.
        
        ################# Parameters #################
        Param: traces (2D numpy array of floats)
        Description: 2D array containing the traces the user wants to conduct analysis with. Shape of [n,p] where n
                     is the number of traces and p is the points in each trace.
        
        Param: sampling_rate (float)
        Description: sampling rate of the data points in s^-1.
        
        Param: geometry (2D array of floats)
        Description: 2D array describing the lon lat and elevation of the stations [lon,lat,depth]
        
        Param: distance (float)
        Description: Epicentral distance from the event to the centre of the array.
        
        Param: rel_x: float
        Description: The x component of the predicted slowness vector used to align the traces.
        
        Param: rel_y: float
        Description: The y component of the predicted slowness vector used to align the traces.
        
        Param: sxmax (float)
        Description: Maximum magnitude of slowness on x axis, used for creating the slowness grid.
        
        Param: sxmin (float)
        Description: Minimun magnitude of the slowness on x axis, used for creating the slowness grid.
        
        Param: symax (float)
        Description: Maximum magnitude of slowness on y axis, used for creating the slowness grid.
        
        Param: symin (float)
        Description: Minimun magnitude of the slowness on y axis, used for creating the slowness grid.
        
        Param: s_space (float)
        Description: The slowness interval for each step e.g. 0.1.
        
        ################# Return #################
        lin_tp: 2D array of power values for each slowness vector.
        noise_mean: mean of noise power estimates.
        peaks: peak power location in the grid.
    
    BF_Spherical_Pol_Lin(traces, sampling_rate, geometry, distance, smin, smax, bazmin, bazmax, s_space, baz_space)
        Function to search over a range of slowness vectors described in polar coordinates and estimates the
        coherent power. Stacks the traces using linear stacking.
        
        ################# Parameters #################
        Param: traces (2D numpy array of floats)
        Description: 2D array containing the traces the user wants to conduct analysis with. Shape of [n,p] where n
                     is the number of traces and p is the points in each trace.
        
        Param: sampling_rate (float)
        Description: sampling rate of the data points in s^-1.
        
        Param: geometry (2D array of floats)
        Description: 2D array describing the lon lat and elevation of the stations [lon,lat,depth]
        
        Param: distance (float)
        Description: Epicentral distance from the event to the centre of the array.
        
        Param: smax (float)
        Description: Maximum magnitude of slowness.
        
        Param: smin (float)
        Description: Minimun magnitude of the slowness.
        
        Param: bazmin (float)
        Description: Minimum backazimuth value to search over.
        
        Param: bazmax (float)
        Description: Maximum backazimuth value to search over.
        
        Param: s_space (float)
        Description: The slowness interval for each step e.g. 0.05.
        
        Param: baz_space (float)
        Description: The backazimuth interval for each step e.g. 0.1.
        
        ################# Return #################
        3 arrays with: [slow_x, slow_y, rel_power] for each slowness and backazimuth combination in the grid for:
        
        - lin_tp: linear stack power grid.
        - results_arr: 2D array containing power values for:
            [slow, baz, power_pws, power_F, power_lin]
        - peaks: 2D array with 3 rows containing the SLOW,BAZ points of the maximum power value for
                 phase weighted, linear and F-statistic respectively.
    
    BF_Spherical_Pol_PWS(traces, phase_traces, sampling_rate, geometry, distance, smin, smax, bazmin, bazmax, s_space, baz_space, degree)
        Function to search over a range of slowness vectors described in polar coordinates and estimates the
        coherent power. Stacks the traces using phase weighted stacking.
        
        ################# Parameters #################
        Param: traces (2D numpy array of floats)
        Description: 2D array containing the traces the user wants to conduct analysis with. Shape of [n,p] where n
                     is the number of traces and p is the points in each trace.
        
        Param: phase_traces (2D numpy array of floats)
        Description: a 2D numpy array containing the instantaneous phase at each time point
                     that the user wants to use in the phase weighted stack. Shape of [n,p]
                     where n is the number of traces and p is the points in each trace.
        
        Param: sampling_rate (float)
        Description: sampling rate of the data points in s^-1.
        
        Param: geometry (2D array of floats)
        Description: 2D array describing the lon lat and elevation of the stations [lon,lat,depth]
        
        Param: distance (float)
        Description: Epicentral distance from the event to the centre of the array.
        
        Param: smax (float)
        Description: Maximum magnitude of slowness.
        
        Param: smin (float)
        Description: Minimun magnitude of the slowness.
        
        Param: bazmin (float)
        Description: Minimum backazimuth value to search over.
        
        Param: bazmax (float)
        Description: Maximum backazimuth value to search over.
        
        Param: s_space (float)
        Description: The slowness interval for each step e.g. 0.05.
        
        Param: baz_space (float)
        Description: The backazimuth interval for each step e.g. 0.1.
        
        Param: degree (float)
        Description: The degree for the phase weighted stacking to reduce incoherent arrivals by.
        
        ################# Return #################
        3 arrays with: [slow, baz, rel_power] for each slowness and backazimuth combination in the grid for:
        
        - pws_tp: phase weighted stacked power grid.
        - results_arr: 2D array containing power values for:
            [slow_x, slow_y, power_pws, power_F, power_lin]
        - peaks: 2D array with 3 rows containing the SLOW,BAZ points of the maximum power value for
                 phase weighted, linear and F-statistic respectively.
    
    BF_Spherical_Pol_all(traces, phase_traces, sampling_rate, geometry, distance, smin, smax, bazmin, bazmax, s_space, baz_space, degree)
        Function to search over a range of slowness vectors described in polar coordinates and estimates the
        coherent power. Stacks the traces using linear and phase weighted stacking and applies the F statistic.
        
        ################# Parameters #################
        Param: traces (2D numpy array of floats)
        Description: 2D array containing the traces the user wants to conduct analysis with. Shape of [n,p] where n
                     is the number of traces and p is the points in each trace.
        
        Param: phase_traces (2D numpy array of floats)
        Description: a 2D numpy array containing the instantaneous phase at each time point
                     that the user wants to use in the phase weighted stack. Shape of [n,p]
                     where n is the number of traces and p is the points in each trace.
        
        Param: sampling_rate (float)
        Description: sampling rate of the data points in s^-1.
        
        Param: geometry (2D array of floats)
        Description: 2D array describing the lon lat and elevation of the stations [lon,lat,depth]
        
        Param: distance (float)
        Description: Epicentral distance from the event to the centre of the array.
        
        Param: smax (float)
        Description: Maximum magnitude of slowness.
        
        Param: smin (float)
        Description: Minimun magnitude of the slowness.
        
        Param: bazmin (float)
        Description: Minimum backazimuth value to search over.
        
        Param: bazmax (float)
        Description: Maximum backazimuth value to search over.
        
        Param: s_space (float)
        Description: The slowness interval for each step e.g. 0.05.
        
        Param: baz_space (float)
        Description: The backazimuth interval for each step e.g. 0.1.
        
        Param: degree (float)
        Description: The degree for the phase weighted stacking to reduce incoherent arrivals by.
        
        ################# Return #################
        5 arrays with: [slow, baz, rel_power] for each slowness and backazimuth combination in the grid for:
        
        - pws_tp: phase weighted stacked power grid.
        - lin_tp: linear stack power grid.
        - f_tp: F-statistic power grid.
        - results_arr: 2D array containing power values for:
            [slow, baz, power_pws, power_F, power_lin]
        - peaks: 2D array with 3 rows containing the SLOW,BAZ points of the maximum power value for
                 phase weighted, linear and F-statistic respectively.
    
    BF_Spherical_XY_Lin(traces, sampling_rate, geometry, distance, sxmin, sxmax, symin, symax, s_space)
        Function to search over a range of slowness vectors, described in cartesian coordinates, and measure
        the coherent power. Stacks the traces using linear stack.
        
        ################# Parameters #################
        Param: traces (2D numpy array of floats)
        Description: 2D array containing the traces the user wants to conduct analysis with. Shape of [n,p] where n
                     is the number of traces and p is the points in each trace.
        
        
        Param: sampling_rate (float)
        Description: sampling rate of the data points in s^-1.
        
        Param: geometry (2D array of floats)
        Description: 2D array describing the lon lat and elevation of the stations [lon,lat,depth]
        
        Param: distance (float)
        Description: Epicentral distance from the event to the centre of the array.
        
        Param: sxmax (float)
        Description: Maximum magnitude of slowness on x axis, used for creating the slowness grid.
        
        Param: sxmin (float)
        Description: Minimun magnitude of the slowness on x axis, used for creating the slowness grid.
        
        Param: symax (float)
        Description: Maximum magnitude of slowness on y axis, used for creating the slowness grid.
        
        Param: symin (float)
        Description: Minimun magnitude of the slowness on y axis, used for creating the slowness grid.
        
        Param: s_space (float)
        Description: The slowness interval for each step e.g. 0.1.
        
        
        ################# Return #################
        
        - lin_tp: linear stack power grid.
        - results_arr: 2D array containing power values for:
            [slow_x, slow_y, power_pws, power_F, power_lin, baz, abs_slow]
        - peaks: 2D array with 1 row containing the X,Y points of the maximum power value for
                 phase weighted, linear and F-statistic respectively.
    
    BF_Spherical_XY_PWS(traces, phase_traces, sampling_rate, geometry, distance, sxmin, sxmax, symin, symax, s_space, degree)
        Function to search over a range of slowness vectors, described in cartesian coordinates, and measure
        the coherent power. Stacks the traces using phase weighted stacking.
        
        ################# Parameters #################
        Param: traces (2D numpy array of floats)
        Description: 2D array containing the traces the user wants to conduct analysis with. Shape of [n,p] where n
                     is the number of traces and p is the points in each trace.
        
        Param: phase_traces (2D numpy array of floats)
        Description: a 2D numpy array containing the instantaneous phase at each time point
                     that the user wants to use in the phase weighted stack. Shape of [n,p]
                     where n is the number of traces and p is the points in each trace.
        
        Param: sampling_rate (float)
        Description: sampling rate of the data points in s^-1.
        
        Param: geometry (2D array of floats)
        Description: 2D array describing the lon lat and elevation of the stations [lon,lat,depth]
        
        Param: distance (float)
        Description: Epicentral distance from the event to the centre of the array.
        
        Param: sxmax (float)
        Description: Maximum magnitude of slowness on x axis, used for creating the slowness grid.
        
        Param: sxmin (float)
        Description: Minimun magnitude of the slowness on x axis, used for creating the slowness grid.
        
        Param: symax (float)
        Description: Maximum magnitude of slowness on y axis, used for creating the slowness grid.
        
        Param: symin (float)
        Description: Minimun magnitude of the slowness on y axis, used for creating the slowness grid.
        
        Param: s_space (float)
        Description: The slowness interval for each step e.g. 0.1.
        
        Param: degree (float)
        Description: The degree for the phase weighted stacking to reduce incoherent arrivals by.
        
        ################# Return #################
        
        - pws_tp: phase weighted stacked power grid.
        - results_arr: 2D array containing power values for:
            [slow_x, slow_y, power_pws, power_F, power_lin, baz, abs_slow]
        - peaks: 2D array with 1 rows containing the X,Y points of the maximum power value for
                 phase weighted, linear and F-statistic respectively.
    
    BF_Spherical_XY_all(traces, phase_traces, sampling_rate, geometry, distance, sxmin, sxmax, symin, symax, s_space, degree)
        Function to search over a range of slowness vectors, described in cartesian coordinates, and measure
        the coherent power. Stacks the traces using linear, phase weighted stacking and F statistic.
        
        
        ################# Parameters #################
        Param: traces (2D numpy array of floats)
        Description: 2D array containing the traces the user wants to conduct analysis with. Shape of [n,p] where n
                     is the number of traces and p is the points in each trace.
        
        Param: phase_traces (2D numpy array of floats)
        Description: a 2D numpy array containing the instantaneous phase at each time point
                     that the user wants to use in the phase weighted stack. Shape of [n,p]
                     where n is the number of traces and p is the points in each trace.
        
        Param: sampling_rate (float)
        Description: sampling rate of the data points in s^-1.
        
        Param: geometry (2D array of floats)
        Description: 2D array describing the lon lat and elevation of the stations [lon,lat,depth]
        
        Param: distance (float)
        Description: Epicentral distance from the event to the centre of the array.
        
        Param: sxmax (float)
        Description: Maximum magnitude of slowness on x axis, used for creating the slowness grid.
        
        Param: sxmin (float)
        Description: Minimun magnitude of the slowness on x axis, used for creating the slowness grid.
        
        Param: symax (float)
        Description: Maximum magnitude of slowness on y axis, used for creating the slowness grid.
        
        Param: symin (float)
        Description: Minimun magnitude of the slowness on y axis, used for creating the slowness grid.
        
        Param: s_space (float)
        Description: The slowness interval for each step e.g. 0.1.
        
        Param: degree (float)
        Description: The degree for the phase weighted stacking to reduce incoherent arrivals by.
        
        ################# Return #################
        
        - pws_tp: phase weighted stacked power grid.
        - lin_tp: linear stack power grid.
        - f_tp: F-statistic power grid.
        - results_arr: 2D array containing power values for:
            [slow_x, slow_y, power_pws, power_F, power_lin, baz, abs_slow]
        - peaks: 2D array with 3 rows containing the X,Y points of the maximum power value for
                 phase weighted, linear and F-statistic respectively.
    
    Baz_vespagram_Lin(traces, sampling_rate, geometry, distance, slow, bmin, bmax, b_space)
        Function to calculate the backazimuth vespagram of given traces using linear stacking.
        
        Param: traces (2D numpy array of floats)
        Description: 2D array containing the traces the user wants to conduct analysis with. Shape of [n,p] where n
                     is the number of traces and p is the points in each trace.
        
        Param: sampling_rate (float)
        Description: sampling rate of the data points in s^-1.
        
        Param: geometry (2D array of floats)
        Description: 2D array describing the lon lat and elevation of the stations [lon,lat,depth]
        
        Param: distance (float)
        Description: Epicentral distance from the event to the centre of the array.
        
        Param: slow (float)
        Description: Constant slowness value to use.
        
        Param: bmax (float)
        Description: Maximum magnitude of backazimuth.
        
        Param: bmin (float)
        Description: Minimun magnitude of the backazimuth.
        
        Param: b_space (float)
        Description: The backazimuth interval for each step e.g. 0.05.
        
        Return:
            ves_lin: 2D numpy array of floats representing how the amplitude of the trace at a slowness
                     varies with time.
    
    Baz_vespagram_PWS(traces, phase_traces, sampling_rate, geometry, distance, slow, bmin, bmax, b_space, degree)
        Function to calculate the backazimuth vespagram of given traces using phase weighted stacking.
        
        Param: traces (2D numpy array of floats)
        Description: 2D array containing the traces the user wants to conduct analysis with. Shape of [n,p] where n
                     is the number of traces and p is the points in each trace.
        
        Param: phase_traces (2D numpy array of floats)
        Description: a 2D numpy array containing the instantaneous phase at each time point
                     that the user wants to use in the phase weighted stack. Shape of [n,p]
                     where n is the number of traces and p is the points in each trace.
        
        Param: sampling_rate (float)
        Description: sampling rate of the data points in s^-1.
        
        Param: geometry (2D array of floats)
        Description: 2D array describing the lon lat and elevation of the stations [lon,lat,depth]
        
        Param: distance (float)
        Description: Epicentral distance from the event to the centre of the array.
        
        Param: slow (float)
        Description: Constant slowness value to use.
        
        Param: bmax (float)
        Description: Maximum magnitude of backazimuth.
        
        Param: bmin (float)
        Description: Minimun magnitude of the backazimuth.
        
        Param: b_space (float)
        Description: The backazimuth interval for each step e.g. 0.05.
        
        Param: degree (float)
        Description: The degree for the phase weighted stacking to reduce incoherent arrivals by.
        
        Return:
            ves_pws: 2D numpy array of floats representing how the amplitude of the trace at a slowness
                     varies with time.
    
    Vespagram_Lin(traces, sampling_rate, geometry, distance, baz, smin, smax, s_space)
        Function to calculate the slowness vespagram of given traces using linear stacking.
        
        Param: traces (2D numpy array of floats)
        Description: 2D array containing the traces the user wants to conduct analysis with. Shape of [n,p] where n
                     is the number of traces and p is the points in each trace.
        
        Param: sampling_rate (float)
        Description: sampling rate of the data points in s^-1.
        
        Param: geometry (2D array of floats)
        Description: 2D array describing the lon lat and elevation of the stations [lon,lat,depth]
        
        Param: distance (float)
        Description: Epicentral distance from the event to the centre of the array.
        
        Param: baz (float)
        Description: Constant backazimuth value to use.
        
        Param: smax (float)
        Description: Maximum magnitude of slowness.
        
        Param: smin (float)
        Description: Minimun magnitude of the slowness.
        
        Param: s_space (float)
        Description: The slowness interval for each step e.g. 0.05.
        
        Return:
            ves_lin: 2D numpy array of floats representing how the amplitude of the trace at a slowness
                     varies with time.
    
    Vespagram_PWS(traces, phase_traces, sampling_rate, geometry, distance, baz, smin, smax, s_space, degree)
        Function to calculate the slowness vespagram of given traces using phase weighted stacking.
        
        Param: traces (2D numpy array of floats)
        Description: 2D array containing the traces the user wants to conduct analysis with. Shape of [n,p] where n
                     is the number of traces and p is the points in each trace.
        
        Param: phase_traces (2D numpy array of floats)
        Description: a 2D numpy array containing the instantaneous phase at each time point
                     that the user wants to use in the phase weighted stack. Shape of [n,p]
                     where n is the number of traces and p is the points in each trace.
        
        Param: sampling_rate (float)
        Description: sampling rate of the data points in s^-1.
        
        Param: geometry (2D array of floats)
        Description: 2D array describing the lon lat and elevation of the stations [lon,lat,depth]
        
        Param: distance (float)
        Description: Epicentral distance from the event to the centre of the array.
        
        Param: baz (float)
        Description: Constant backazimuth value to use.
        
        Param: smax (float)
        Description: Maximum magnitude of slowness.
        
        Param: smin (float)
        Description: Minimun magnitude of the slowness.
        
        Param: s_space (float)
        Description: The slowness interval for each step e.g. 0.05.
        
        Param: degree (float)
        Description: The degree for the phase weighted stacking to reduce incoherent arrivals by.
        
        Return:
            ves_pws: 2D numpy array of floats representing how the amplitude of the trace at a slowness
                     varies with time.
    
    calculate_locus(P1, P2)
        Function to calculate the locus angle between points P1 and P2.
        A locus is a line that separates two point and is orthogonal to the line P1-P2.
        
        Param: P1 (1-D numpy array of floats)
        Description: x and y coordinates of point 1.
        
        Param: P2 (1-D numpy array of floats)
        Description: x and y coordinates of point 2.
        
        Returns:
            Theta: Angle pointing from P1 to P2 relative to vertical.
            Midpoint: Coordinates of the midpoint between P1 and P2.
            Phi_1: Locus angle (90 degrees from Theta).
            Phi_2: Locus angle (180 degrees from Phi_1).
    
    calculate_time_shifts(traces, geometry, abs_slow, baz, distance, centre_x, centre_y, type='circ')
        Calculates the time delay for each station relative to the time the phase
        should arrive at the centre of the array. Will use either a plane or curved
        wavefront approximation.
        
        Param: traces (2D numpy array of floats)
        Description: a 2D numpy array containing the traces that the user wants to stack.
        
        Param: geometry (2D array of floats)
        Description: 2D array describing the lon lat and elevation of the stations [lon,lat,depth]
        
        Param: distance (float)
        Description: Epicentral distance from the event to the centre of the array.
        
        Param: abs_slow (float)
        Description: horizontal slowness you want to align traces over.
        
        Param: baz (float)
        Description: backazimuth you want to align traces over.
        
        Param: centre_x (float)
        Description: mean longitude.
        
        Param: centre_y (float)
        Description: mean latitude.
        
        Param: type (string)
        Description: will calculate either using a curved (circ) or plane (plane) wavefront.
        
        Return:
            times - 1D numpy array of the arrival time for the phase at
                    each station relative to the centre.
        
            shifts - 1D numpy array of the time shift to align on a phase at
                    each station relative to the centre.
    
    coords_lonlat_rad_bearing(lat1, lon1, dist_deg, brng)
        Returns the latitude and longitude of a new cordinate that is the defined distance away and
        at the correct bearing from the starting point.
        
        Param: lat1 (float)
        Description: starting point latitiude.
        
        Param: lon1 (float)
        Description: starting point longitude.
        
        Param: dist_deg (float)
        Description:  distance from starting point in degrees.
        
        Param: brng (float)
        Description: angle from north describing the direction where the new coordinate is located.
        
        Return:
            latitude and longitude of the new cordinate.
    
    get_max_power_loc(tp, sxmin, symin, s_space)
        finds the location of the maximum power value within a given
        slowness space.
        
        Param: tp (2D array of floats)
        Description: 2D array of values to find the maxima in.
        
        Param: sxmin (float)
        Description: minimum value on the x axis.
        
        Param: symin (float)
        Description: minimum value on the y axis.
        
        Param: s_space (float)
        Description: step interval. Assumes x and y axis spacing is the same.
        
        return:
            2D array of: [[loc_x,loc_y]]
    
    get_slow_baz(slow_x, slow_y, dir_type)
        Returns the backazimuth and slowness magnitude of a slowness vector given its x and y components.
        
        Param: slow_x (float)
        Description: X component of slowness vector.
        
        Param: slow_y (float)
        Description: Y component of slowness vector.
        
        Param: dir_type (string)
        Description: how do you want the direction to be measured, backazimuth (baz) or azimuth (az).
        
        Return:
            slowness magnitude and baz/az value.
    
    get_slow_baz_array(slow_x, slow_y, dir_type)
        Returns the backazimuth and slowness magnitude of a slowness vector given its x and y components.
        
        Param: slow_x (float)
        Description: X component of slowness vector.
        
        Param: slow_y (float)
        Description: Y component of slowness vector.
        
        Param: dir_type (string)
        Description: how do you want the direction to be measured, backazimuth (baz) or azimuth (az).
        
        return: slowness magnitude and baz/az value.
    
    haversine_deg(lat1, lon1, lat2, lon2)
        Function to calculate the distance in degrees between two points on a sphere.
        
        Param: lat1 (float)
        Description: latitiude of point 1.
        
        Param: lat1 (float)
        Description: longitiude of point 1.
        
        Param: lat2 (float)
        Description: latitiude of point 2.
        
        Param: lon2 (float)
        Description: longitude of point 2.
        
        Return:
            Distance between two points in degrees.
    
    linear_stack_baz_slow(traces, sampling_rate, geometry, distance, slow, baz)
        Function to stack the given traces along a backazimuth and horizontal slownes.
        
        Param: Traces (2D numpy array of floats)
        Description: a 2D numpy array containing the traces that the user wants to stack.
        
        Param: sampling_rate (float)
        Description: sampling rate of the data points in s^-1.
        
        Param: geometry (2D array of floats)
        Description: 2D array describing the lon lat and elevation of the stations [lon,lat,depth]
        
        Param: Distance (float)
        Description: Epicentral distance from the event to the centre of the array.
        
        Param: slow (float)
        Description: horizontal slowness you want to align traces over.
        
        Param: baz (float)
        Description: backazimuth you want to align traces over.
        
        Return:
        lin_stack - numpy array of the stacked waveform.
    
    pws_stack_baz_slow(traces, phase_traces, sampling_rate, geometry, distance, slow, baz, degree)
        Function to stack the given traces along a backazimuth and horizontal slownes.
        
        Param: traces (2D numpy array of floats)
        Description: a 2D numpy array containing the traces that the user wants to stack.
        
        Param: phase_traces (2D numpy array of floats)
        Description: a 2D numpy array containing the instantaneous phase at each time point
                     that the user wants to use in the phase weighted stack.
        
        Param: sampling_rate (float)
        Description: sampling rate of the data points in s^-1.
        
        Param: geometry (2D array of floats)
        Description: 2D array describing the lon lat and elevation of the stations [lon,lat,depth]
        
        Param: distance (float)
        Description: Epicentral distance from the event to the centre of the array.
        
        Param: slow (float)
        Description: horizontal slowness you want to align traces over.
        
        Param: baz (float)
        Description: backazimuth you want to align traces over.
        
        Return:
        stack - numpy array of the stacked waveform.
    
    shift_traces(traces, geometry, abs_slow, baz, distance, centre_x, centre_y, sampling_rate, type='circ')
        Shifts the traces using the predicted arrival times for a given backazimuth and slowness.
        
        Param: traces (2D numpy array of floats)
        Description: a 2D numpy array containing the traces that the user wants to stack.
        
        Param: geometry (2D array of floats)
        Description: 2D array describing the lon lat and elevation of the stations [lon,lat,depth]
        
        Param: distance (float)
        Description: Epicentral distance from the event to the centre of the array.
        
        Param: abs_slow (float)
        Description: horizontal slowness you want to align traces over.
        
        Param: baz (float)
        Description: backazimuth you want to align traces over.
        
        Param: centre_x (float)
        Description: mean longitude.
        
        Param: centre_y (float)
        Description:mean latitude.
        
        Param: sampling_rate (float)
        Description: sampling rate of the data points in s^-1.
        
        Param: type (string)
        Description: will calculate either using a curved (circ) or plane (plane) wavefront.
        
        Return:
            shifted_traces - 2D numpy array of floats of the shifted traces.

FILE
    /Users/jamieward/Array_Seis_Circle/Circ_Array/circ_beam.py


